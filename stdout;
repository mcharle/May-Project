19|First Day||I spent today learning about Haml (HTML alternate markup language). It's a cleaner, simpler version of HTML. For instance, I often forget to close div tags but I don't have to worry about that in Haml. My assignment tonight is to draw a layout for my blog. I'll be starting it tomorrow!|Screen_Shot_2013-05-24_at_12.49.36_PM.png|||||2013-05-13T13:00:00+00:00
20|Starting the Blog||I'm using Sinatra, a web app written in Ruby, to handle routes. Sinatra allows me to easily and quickly create routes and see content. My blog is local, so I have to run a server ("ruby web.rb" in terminal) and go to localhost:4567 in my browser.|Screen_Shot_2013-05-14_at_1.48.17_PM.png|||||2013-05-14T09:00:00+00:00
24|Style||Style has never been one of my strengths. I'm fine with adding color and height/width, but I have a lot of difficulty with floating. Floating positions different elements on the page. To make distinctions between elements easier for me to see, I gave each one a color or border. It's ugly, but I'll work on the color scheme after floats.|Screen_Shot_2013-05-14_at_1.47.32_PM.png|||||2013-05-14T10:00:00+00:00
25|Making Things Easier||Kunal installed iTerm and shotgun for me. When I used terminal for command line things, almost everything I typed was green. iTerm has code highlighting, so it's easier to read. Whenever I edited anything in web.rb (routes, etc.) I would have to restart the server ("ruby web.rb"). Using shotgun ("shotgun web.rb"), I only have to refresh the page to see my edits.|Screen_Shot_2013-05-28_at_11.50.13_AM.png|||||2013-05-15T09:00:00+00:00
26|Better Style||After what seems like hours, I'm finally satisfied with the style. I added a navigation bar and two pagesâ€“ an FAQ page and a page about my daily commute. Kunal showed me how to make the navigation bar appear on each page without just copy/pasting the code for it.|Screen_Shot_2013-05-28_at_12.08.04_PM.png|||||2013-05-15T15:00:00+00:00
29|Create||Blogs aren't meant to have hard-coded posts; users should create posts though a form. To add this to my blog, I had to create a "new post" page and a database to store the posts. I used DataMapper, which is written in Ruby, to set up my database. I also had to define what a post is (title, date, content, picture, id). When click the submit button on the "new post" page, the content I typed into the fields get sent to web.rb. My create handler makes a new post with the specified parameters, saves it and redirects me back to my home page, where I can see my new post.|Screen_Shot_2013-05-28_at_1.36.57_PM.png|||||2013-05-16T09:00:00+00:00
30|Delete||I can now delete posts! First, I added a delete button, which passes the post's id to a route in web.rb. The route finds the post with the specified id and deletes it. Then, it takes me back to the home page. It was much simpler than I thought it would be. Edit is goign to be a lot more complicated than delete.|Screen_Shot_2013-05-28_at_12.57.52_PM.png|||||2013-05-17T09:00:00+00:00
31|Edit||I'm finally done with the edit function. I ran into many problems. At one point, when I tried to edit a post, I would end up editing the first post of my blog instead. It was frustrating at times, but I've gotten a lot better at debugging. The edit function is different from the delete button. When I click it, it takes me to a page similar to the new form. The fields are already filled in with the post's content and title. The update button sends the new content to web.rb, which updates the post and redirects to the home page.|Screen_Shot_2013-05-28_at_1.56.49_PM.png|||||2013-05-20T13:00:00+00:00
33|Finishing the Blog||The last feature I had to add to my blog was images. At first I tried to use a gem called paperclip. It was very confusing and didn't actually work. I used a gem called carrierwave instead. Making the blog has taught me a lot about Github, Sinatra, Haml and Ruby. After I add some more style, I can go on to make a web app of my choice.|Screen_Shot_2013-05-28_at_2.34.39_PM.png|||||2013-05-21T14:00:00+00:00
